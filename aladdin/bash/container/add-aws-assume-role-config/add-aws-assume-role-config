#!/usr/bin/env bash
set -eu -o pipefail

function add_aws_assume_role_config {
    # This command edits your aws config and credentials file to add aws_access_key_id,
    # aws_access_key_secret, aws_session_token, and region for role $1, under profile $2. We will
    # prompt the user for an MFA token if $3 is true, and the temporary credentials will last for
    # $4 seconds.

    if ! "$BASTION_ACCOUNT_ENABLED"; then
        echo >&2 "aladdin: error: bastion account is not enabled currently. update your aladdin-config to enable"
        exit 1
    fi

    local role="$1"
    local profile_name="$2"
    local mfa_enabled="$3"
    local duration="$4"

    session_name="$(aws --profile $BASTION_ACCOUNT_PROFILE sts get-caller-identity \
        --query 'Arn' --output text | cut -d '/' -f2)"

    if "$mfa_enabled"; then

        mfa_serial="$(aws --profile operations iam list-mfa-devices \
            --query 'MFADevices[0].SerialNumber' --output text)"

        # Ask the user for their MFA token in yellow color
        echo -ne '\e[33mPlease enter your AWS MFA token: \e[0m'; read -r token

        payload="$(aws --profile $BASTION_ACCOUNT_PROFILE sts assume-role  \
            --role-arn $role --duration-seconds $duration --serial-number $mfa_serial \
            --token $token --role-session-name $session_name)"
    else

        payload="$(aws --profile $BASTION_ACCOUNT_PROFILE sts assume-role  \
            --role-arn $role --duration-seconds "$duration" --role-session-name "$session_name")"
    fi

    aws configure --profile "$profile_name" set aws_access_key_id "$(jq -r .Credentials.AccessKeyId <<< $payload)"
    aws configure --profile "$profile_name" set aws_secret_access_key "$(jq -r .Credentials.SecretAccessKey <<< $payload)"
    aws configure --profile "$profile_name" set aws_session_token "$(jq -r .Credentials.SessionToken <<< $payload)"
    aws configure --profile "$profile_name" set region "$AWS_DEFAULT_REGION"
}


function usage {
    cat <<-EOF
		usage: aladdin add-aws-assume-role-config [-h] role profile_name mfa_enabled duration

		positional arguments:
		  role                  which role to set aws config for
		  profile_name          the name of the aws profile
		  mfa_enabled           whether to prompt user for MFA token
		  duration              how long these credentials will last in seconds before expiring

		optional arguments:
		  -h, --help            show this help message and exit
	EOF
}

if [[ $# -lt 4 || "$1" == "-h" || "$1" == "--help" ]]; then
    usage
else
    add_aws_assume_role_config "$@"
fi
