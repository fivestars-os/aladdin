#!/usr/bin/env bash
set -eu -o pipefail

function run_bash {
    if "$IS_PROD"; then
        export PS1="\[\033[38;31m\]$CLUSTER_CODE:$NAMESPACE> \[\033[0m\]"
    else
        export PS1="$CLUSTER_CODE:$NAMESPACE> "
    fi
    echo "Launching bash shell. Press CTRL+D to exit."

    # If authentication is enabled, switch to the AUTHENTICATION_DEFAULT_ROLE level
    if "$AUTHENTICATION_ENABLED"; then
        kubectl config set-context "$NAMESPACE.$CLUSTER_NAME" --cluster "$CLUSTER_NAME" \
            --namespace="$NAMESPACE" --user "$AUTHENTICATION_DEFAULT_ROLE"
    fi

    # If we received a command, pass it through to the bash invocation with "-c".
    cmd=( )
    if [[ "$#" -gt 0 ]]; then
        # We are passing the literal string '"$0" "$@"'' to bash as the script to run.
        # The "$0" is necessary for argv alignment, as otherwise it will erroneously
        # discard the first item in "$@", which is the actual command we wish to run.
        cmd=( -c '"$0" "$@"' "$@" )
    fi

    # The BASH_ENV script is only automatically sourced for non-interactive shells, while the --init-file is
    # only sourced for interactive ones. The "bash_cmd_init.bash" script will source "bash_cmd_includes.bash"
    # and also perform some extra interactive shell setup.
    # https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html#Invoked-non_002dinteractively
    BASH_ENV="${SCRIPT_DIR}/bash_cmd_includes.bash" bash --init-file "${SCRIPT_DIR}/bash_cmd_init.bash" "${cmd[@]}"
}

function usage {
    cat <<-EOF
		usage: aladdin bash [-h]

		optional arguments:
		  -h, --help            show this help message and exit
	EOF
}

if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    usage
else
    run_bash "$@"
fi
