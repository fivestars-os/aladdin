#!/usr/bin/env python3
import logging

from aladdin.lib.cluster_rules import ClusterRules


def fill_hostedzone(
    boto_session, hostnames_to_loadbalancers, cluster_domain_name=None
):
    cluster_domain_name = cluster_domain_name or ClusterRules().cluster_domain_name
    cluster_hosted_zone = get_hostedzone(boto_session, cluster_domain_name)
    if cluster_hosted_zone is None:
        raise KeyError("route 53 for [%s] not found" % cluster_domain_name)

    return fill_dns_dict(boto_session, cluster_hosted_zone, hostnames_to_loadbalancers)


def get_hostedzone(boto_session, dns_name) -> str:
    log = logging.getLogger(__name__)
    route53 = boto_session.client("route53")

    zones = route53.list_hosted_zones_by_name(DNSName=dns_name)["HostedZones"]

    # get only the public ones
    zones = [
        z for z in zones if not z["Config"]["PrivateZone"] and z["Name"].strip(".") == dns_name
    ]

    if not zones:
        log.info("Hosted zone %s not found", dns_name)
        return None

    if len(zones) > 1:
        raise Exception("More than 1 hosted zone for %s" % dns_name)

    hostedzone_id = zones[0]["Id"]
    log.info("Hosted zone %s found : %s", dns_name, hostedzone_id)
    return hostedzone_id


def extract_cname_mapping(boto_session, hostedzone_id):
    route53 = boto_session.client("route53")

    response = get_all_resource_record_sets(route53, hostedzone_id)

    res = {}
    for rrs in response:
        name, type, records = rrs.get("Name"), rrs.get("Type"), rrs.get("ResourceRecords")
        if name is None or records is None or type != "CNAME":
            continue
        # CNAME have only one value
        res[name.strip(".")] = records[0]["Value"]

    return res


def generate_record(name, value):
    return dict(
        Action="UPSERT",
        ResourceRecordSet=dict(
            Name=name, Type="CNAME", TTL=5 * 60, ResourceRecords=[dict(Value=value)]
        ),
    )


def fill_dns_dict(boto_session, hostedzone_id, key_vals):
    log = logging.getLogger(__name__)
    route53 = boto_session.client("route53")

    cname_mapping = extract_cname_mapping(boto_session, hostedzone_id)

    key_vals_cleaned = {k: v for k, v in key_vals.items() if v is not None}

    to_upsert = set(key_vals_cleaned.items()) - set(cname_mapping.items())
    log.info(
        "%s CNAME present / %s service mapping / %s common / %s to upsert",
        len(cname_mapping),
        len(key_vals_cleaned),
        len(set(key_vals_cleaned) & set(cname_mapping)),
        len(to_upsert),
    )

    for name, val in sorted(to_upsert):
        log.info("%s => %s", name, val)

    records = [generate_record(name, val) for name, val in sorted(to_upsert)]

    if records:
        route53.change_resource_record_sets(
            HostedZoneId=hostedzone_id,
            ChangeBatch=dict(Comment="generated by aladdin", Changes=records),
        )

    return len(records)


def get_all_resource_record_sets(route53, hosted_zone_id):
    paginator = route53.get_paginator("list_resource_record_sets")
    resource_record_sets = paginator.paginate(HostedZoneId=hosted_zone_id)

    all_rrs = []
    for rrs in resource_record_sets:
        all_rrs.extend(rrs["ResourceRecordSets"])

    return all_rrs
