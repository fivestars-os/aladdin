#!/usr/bin/env python3
import logging
from datetime import datetime


def fill_hostedzone(
    boto_session, cluster_domain_name, namespace_domain_name, hostnames_to_loadbalancers
):
    # Main DNS is on prod, sub DNS should be on sandbox
    namespace_hosted_zone = get_hostedzone(
        boto_session, namespace_domain_name
    ) or create_hostedzone(boto_session, namespace_domain_name)

    cluster_hosted_zone = get_hostedzone(boto_session, cluster_domain_name)
    if cluster_hosted_zone is None:
        raise KeyError("route 53 for [%s] not found" % cluster_domain_name)

    dns_nameservers = get_ns_from_hostedzone(boto_session, namespace_hosted_zone)

    check_ns_values(boto_session, cluster_hosted_zone, namespace_domain_name, dns_nameservers)

    return fill_dns_dict(boto_session, namespace_hosted_zone, hostnames_to_loadbalancers)


def get_hostedzone(boto_session, dns_name):
    log = logging.getLogger(__name__)
    route53 = boto_session.client("route53")

    zones = route53.list_hosted_zones_by_name(DNSName=dns_name)["HostedZones"]

    # get only the public ones
    zones = [
        z for z in zones if not z["Config"]["PrivateZone"] and z["Name"].strip(".") == dns_name
    ]

    if not zones:
        log.info("Hosted zone %s not found", dns_name)
        return None

    if len(zones) > 1:
        raise Exception("More than 1 hosted zone for %s" % dns_name)

    hostedzone_id = zones[0]["Id"]
    log.info("Hosted zone %s found : %s", dns_name, hostedzone_id)
    return hostedzone_id


def create_hostedzone(boto_session, dns_name):
    log = logging.getLogger(__name__)
    route53 = boto_session.client("route53")

    ref = "aladdin_generated_{:%Y%m%d_%H%M%S}".format(datetime.now())

    log.info("Hosted zone %s created", dns_name)

    log.info("Creating hosted zone : %s", dns_name)
    create_res = route53.create_hosted_zone(
        Name=dns_name,
        CallerReference=ref,
        HostedZoneConfig=dict(Comment="Generated by aladdin", PrivateZone=False),
    )

    return create_res["HostedZone"]["Id"]


def get_ns_from_hostedzone(boto_session, hostedzone_id):
    route53 = boto_session.client("route53")

    hosted_info = route53.get_hosted_zone(Id=hostedzone_id)

    dns_name = hosted_info["HostedZone"]["Name"].strip(".")

    response = get_all_resource_record_sets(route53, hostedzone_id)
    rrs_list = [rrs for rrs in response if rrs["Name"] == "%s." % dns_name and rrs["Type"] == "NS"]

    if len(rrs_list) == 0:
        raise Exception("Main NS in hosted zone not found")

    if len(rrs_list) > 1:
        raise Exception("Too much Main NS in hosted zone found")

    res = [rr["Value"] for rr in rrs_list[0]["ResourceRecords"]]

    return res


def check_ns_values(boto_session, main_hosted_id, sub_dns, ns_values):
    log = logging.getLogger(__name__)
    route53 = boto_session.client("route53")

    response = get_all_resource_record_sets(route53, main_hosted_id)

    rrs_list = [rrs for rrs in response if rrs["Name"] == "%s." % sub_dns and rrs["Type"] == "NS"]

    values = None
    if rrs_list:
        values = [rr["Value"] for rr in rrs_list[0]["ResourceRecords"]]

    if values == ns_values:
        # Good case
        log.info("NS value from %s to %s is good", main_hosted_id, sub_dns)
        return

    log.info("Setting NS value from %s to %s", main_hosted_id, sub_dns)
    route53.change_resource_record_sets(
        HostedZoneId=main_hosted_id,
        ChangeBatch=dict(
            Comment="generated by aladdin",
            Changes=[
                dict(
                    Action="UPSERT",
                    ResourceRecordSet=dict(
                        Name="%s." % sub_dns,
                        Type="NS",
                        TTL=5 * 60,  # 5 min
                        ResourceRecords=[{"Value": v} for v in ns_values],
                    ),
                )
            ],
        ),
    )


def extract_cname_mapping(boto_session, hostedzone_id):
    route53 = boto_session.client("route53")

    response = get_all_resource_record_sets(route53, hostedzone_id)

    res = {}
    for rrs in response:
        name, type, records = rrs.get("Name"), rrs.get("Type"), rrs.get("ResourceRecords")
        if name is None or records is None or type != "CNAME":
            continue
        # CNAME have only one value
        res[name.strip(".")] = records[0]["Value"]

    return res


def generate_record(name, value):
    return dict(
        Action="UPSERT",
        ResourceRecordSet=dict(
            Name=name, Type="CNAME", TTL=5 * 60, ResourceRecords=[dict(Value=value)]
        ),
    )


def fill_dns_dict(boto_session, hostedzone_id, key_vals):
    log = logging.getLogger(__name__)
    route53 = boto_session.client("route53")

    cname_mapping = extract_cname_mapping(boto_session, hostedzone_id)

    key_vals_cleaned = {k: v for k, v in key_vals.items() if v is not None}

    to_upsert = set(key_vals_cleaned.items()) - set(cname_mapping.items())
    log.info(
        "%s CNAME present / %s service mapping / %s common / %s to upsert",
        len(cname_mapping),
        len(key_vals_cleaned),
        len(set(key_vals_cleaned) & set(cname_mapping)),
        len(to_upsert),
    )

    for name, val in sorted(to_upsert):
        log.info("%s => %s", name, val)

    records = [generate_record(name, val) for name, val in sorted(to_upsert)]

    if records:
        route53.change_resource_record_sets(
            HostedZoneId=hostedzone_id,
            ChangeBatch=dict(Comment="generated by aladdin", Changes=records),
        )

    return len(records)


def get_all_resource_record_sets(route53, hosted_zone_id):
    paginator = route53.get_paginator("list_resource_record_sets")
    resource_record_sets = paginator.paginate(HostedZoneId=hosted_zone_id)

    all_rrs = []
    for rrs in resource_record_sets:
        all_rrs.extend(rrs["ResourceRecordSets"])

    return all_rrs
