# This workflow is setup to build and publish aladdin to Dockerhub
name: Push to Docker Hub

on:
  push:
    branches:
      - 'main'
    tags:
      - '*.*.*'
      - '*.*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      # QEMU is needed to support multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64, linux/arm64

      - uses: werf/actions/install@v2
        with:
          version: v2.26.6

      # this will select the right tags depending on the Github event
      # master branch will build the "latest" and "main" Dockerhub tags
      # git tags will build the Dockerhub tag matching the git tag
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag

      - uses: actions/github-script@v7
        id: werf-args
        with:
          result-encoding: string
          script: |
            const tags = '${{ steps.meta.outputs.tags }}'.split(',')

            return tags.map((tag) => `--tag ${tag}`)

      - name: werf publish
        run: |
          . $(werf ci-env github --as-file)

          werf cr login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ${{ env.REGISTRY }}

          werf export --repo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} ${{ steps.werf-args.outputs.result }}

  python:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - run: pip3 install poetry==2.0.1

      - run: poetry build

      - if: github.ref != 'refs/heads/main'
        continue-on-error: true  # remove once the connection to the PyPi cloud is setup
        run: poetry publish -r fivestars -u fivestars -p ${{ secrets.PYPI_CLOUD_PASSWORD }}

  cleanup:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - run: git fetch --prune --unshallow

      - uses: werf/actions/cleanup@v2
        with:
          version: v2.26.6
        env:
          WERF_WITHOUT_KUBE: "true"
