#!/usr/bin/env bash
set -eu -o pipefail

function run_bash {
    if "$IS_PROD"; then
        export PS1="\[\033[38;31m\]$CLUSTER_CODE:$NAMESPACE> \[\033[0m\]"
    else
        export PS1="$CLUSTER_CODE:$NAMESPACE> "
    fi
    echo "Launching bash shell. Press CTRL+D to exit."
    # If authentication is enabled, switch to the AUTHENTICATION_DEFAULT_ROLE level
    if "$AUTHENTICATION_ENABLED"; then
        kubectl config set-context "$NAMESPACE.$CLUSTER_NAME" --cluster "$CLUSTER_NAME" \
            --namespace="$NAMESPACE" --user "$AUTHENTICATION_DEFAULT_ROLE"
    fi

    if [[ "$#" -eq 0 ]]; then
        bash --init-file "$SCRIPT_DIR/bash_profile.bash"
    else
        # --init-file only works for interactive shells and since we're supplying stdin
        # it is not going to be interactive. Instead, we use the BASH_ENV env var to run
        # our configuration code prior to the provided command.
        # https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html#Invoked-non_002dinteractively
        BASH_ENV="$SCRIPT_DIR/bash_profile.bash" bash <<<"$@"
    fi
}

function usage {
    cat <<-EOF
		usage: aladdin bash [-h]

		optional arguments:
		  -h, --help            show this help message and exit
	EOF
}

if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    usage
else
    run_bash "$@"
fi
